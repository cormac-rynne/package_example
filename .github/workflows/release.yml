# .github/workflows/release.yml

name: Release and Publish

on:
  workflow_dispatch

permissions:
  contents: write # Allow semantic-release to push changes (version bump, changelog)
  issues: write # Allow semantic-release to comment on issues/PRs
  pull-requests: write # Allow semantic-release to comment on issues/PRs
  id-token: write # Needed for trusted publishing to PyPI

jobs:
  release:
    name: Create Release and Publish to PyPI
    runs-on: ubuntu-latest
    # Prevent duplicate releases on merge commits from PRs
    # if: github.ref == 'refs/heads/main' && !startsWith(github.event.head_commit.message, 'Merge pull request')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Use a specific Python version for releasing

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev] # Install semantic-release and build tools

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine Version and Create GitHub Release (Dry Run - Optional but Safe)
        # Optionally run in dry mode first to see what *would* happen
        id: dry_run_release
        if: true
        run: semantic-release version --print --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # No PyPI token needed here, just interacting with GitHub

      - name: Determine Version and Create GitHub Release (Actual)
        id: create_release
        run: semantic-release version --commit --tag --changelog --gh-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # No PyPI token needed here, as semantic-release isn't uploading to PyPI in this step

      - name: Build package
        run: |
          # semantic-release version command above doesn't run the build, so we do it manually
          python -m build

      - name: Verify built distributions (Optional but Recommended)
        run: |
          ls -l dist/
          # twine check verifies package metadata rendering on PyPI
          twine check dist/*

      - name: Scan for Vulnerabilities in Built Package (Best Practice)
        # Uses pip-audit against the requirements extracted from the built wheel
        run: |
          pip-audit --requirement dist/*.whl

      # - name: Publish
      #   id: publish
      #   run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use the secret you created for the TestPyPI token
          password: ${{ secrets.PYPI_TEST }}
          repository-url: https://test.pypi.org/legacy/
